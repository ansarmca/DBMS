view:
-----
In MySQL, a view is a virtual table based on the result of a SELECT query. It doesn't store data itself but provides a way to simplify complex queries or reuse SQL logic.

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100)
);

INSERT INTO students VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

CREATE TABLE marks (
    mark_id INT PRIMARY KEY,
    student_id INT,
    subject VARCHAR(100),
    score INT,
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);

INSERT INTO marks VALUES
(1, 1, 'Math', 85),
(2, 1, 'English', 90),
(3, 2, 'Math', 78),
(4, 3, 'English', 88);


CREATE VIEW student_scores AS
SELECT
    s.student_id,
    s.name,
    m.subject,
    m.score
FROM students s
JOIN marks m ON s.student_id = m.student_id;

SELECT * FROM student_scores;

+------------+---------+---------+-------+
| student_id | name    | subject | score |
+------------+---------+---------+-------+
| 1          | Alice   | Math    | 85    |
| 1          | Alice   | English | 90    |
| 2          | Bob     | Math    | 78    |
| 3          | Charlie | English | 88    |
+------------+---------+---------+-------+


TO drop a view: DROP VIEW student_scores;

Trigger:
-------
A trigger is a set of SQL statements that automatically executes in response to a specific event (INSERT, UPDATE, DELETE) on a particular table.
syx:

CREATE TRIGGER trigger_name
[BEFORE | AFTER] INSERT | UPDATE | DELETE
ON table_name
FOR EACH ROW
BEGIN
    -- SQL logic here
END;

| **Event** | **Trigger Timing** | **Use Cases**                                                 |
|----------|--------------------|----------------------------------------------------------------|
| `INSERT` | BEFORE / AFTER     | Logs, data validation, update stock, audit trails             |
| `UPDATE` | BEFORE / AFTER     | Track changes, validate updates, adjust related data          |
| `DELETE` | BEFORE / AFTER     | Archive data, audit logs, clean related entries               |



eg:

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    position VARCHAR(100),
    salary DECIMAL(10, 2)
);

CREATE TABLE employee_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(100),
    action_time DATETIME,
    action_type VARCHAR(50)
);

DELIMITER //

CREATE TRIGGER after_employee_insert
AFTER INSERT ON employees
FOR EACH ROW
BEGIN
  INSERT INTO employee_log (emp_name, action_time, action_type)
  VALUES (NEW.name, NOW(), 'INSERT');
END;
//

DELIMITER ;

Insert Data and Test
INSERT INTO employees (name, position, salary)
VALUES ('John Doe', 'Manager', 75000);

Check the Log Table
SELECT * FROM employee_log;

+--------+-----------+---------------------+-------------+
| log_id | emp_name  | action_time         | action_type |
+--------+-----------+---------------------+-------------+
| 1      | John Doe  | 2025-05-20 10:15:00 | INSERT      |
+--------+-----------+---------------------+-------------+

--------------------------------------------------------------------------------------------------------------------------
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    stock INT
);

CREATE TABLE sales (
    sale_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    quantity_sold INT,
    sale_date DATE,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

Trigger to Update Stock After a Sale:
DELIMITER $$

CREATE TRIGGER update_stock_after_sale
AFTER INSERT ON sales
FOR EACH ROW
BEGIN
    UPDATE products
    SET stock = stock - NEW.quantity_sold
    WHERE product_id = NEW.product_id;
END$$

DELIMITER ;

Example Usage:
-- Insert a product with 100 items in stock
INSERT INTO products (product_id, name, stock) VALUES (1, 'Keyboard', 100);

-- Insert a sale of 5 keyboards
INSERT INTO sales (product_id, quantity_sold, sale_date) VALUES (1, 5, CURDATE());

-- Check product stock
SELECT * FROM products;

Expected Output:
+------------+----------+-------+
| product_id | name     | stock |
+------------+----------+-------+
| 1          | Keyboard | 95    |
+------------+----------+-------+
-------------------------------------------------------------------------------------------------------------------------------
1) create a function to display the price of a book

DELIMITER $$

CREATE FUNCTION get_price(a INT) RETURNS DECIMAL(10,2) DETERMINISTIC RETURN (SELECT price FROM books WHERE accno = a)$$
 
DELIMITER ;


SELECT get_price(6);
+--------------+
| get_price(6) |
+--------------+
|        45.99 |
+--------------+



2) create a function to calculate and returns the total fine amount

DELIMITER $$

CREATE FUNCTION total_fine()
RETURNS DECIMAL(10,2)
DETERMINISTIC
RETURN (SELECT SUM(fine) FROM returns)$$

DELIMITER ;

SELECT total_fine();

+---------------+
| total_fines() |
+---------------+
|         15.00 |
+---------------+



3) Create a trigger to set the availability to 'NO' when a book is issued.

DELIMITER $$

CREATE TRIGGER set_availability_no
AFTER INSERT ON issue
FOR EACH ROW
BEGIN
    UPDATE books
    SET availability = 'NO'
    WHERE accno = NEW.accno;
END$$

DELIMITER ;



check about NO:
mysql> select * from books;
+-------+-----------------+-----------------+-------+-----------+--------------+-------------+
| accno | title           | author          | price | type      | availability | publisherid |
+-------+-----------------+-----------------+-------+-----------+--------------+-------------+
|     6 | learning sql    | alan beaulieu   | 45.99 | lending   | yes          |           3 |
|     7 | data structures | mark weiss      | 55.50 | reference | yes          |           2 |
|     8 | dbms concepts   | silberschatz    | 65.25 | lending   | yes          |           1 |
|     9 | python basics   | eric matthes    | 42.75 | lending   | yes          |           5 |
|    10 | java complete   | herbert schildt | 50.99 | lending   | yes          |           4 |
+-------+-----------------+-----------------+-------+-----------+--------------+-------------+

mysql> select * from members;
+----------+-------+--------------+---------+
| memberid | name  | address      | type    |
+----------+-------+--------------+---------+
|        1 | alice | springfield  | student |
|        2 | bob   | shelbyville  | staff   |
|        3 | carol | capital city | student |
|        4 | david | metropolis   | staff   |
|        5 | eve   | gotham       | student |
+----------+-------+--------------+---------+

mysql> insert into issues values(999,2,6,'2025-04-30','2025-05-13');

mysql> select * from books;
+-------+-----------------+-----------------+-------+-----------+--------------+-------------+
| accno | title           | author          | price | type      | availability | publisherid |
+-------+-----------------+-----------------+-------+-----------+--------------+-------------+
|     6 | learning sql    | alan beaulieu   | 45.99 | lending   | no           |           3 |
|     7 | data structures | mark weiss      | 55.50 | reference | yes          |           2 |
|     8 | dbms concepts   | silberschatz    | 65.25 | lending   | yes          |           1 |
|     9 | python basics   | eric matthes    | 42.75 | lending   | yes          |           5 |
|    10 | java complete   | herbert schildt | 50.99 | lending   | yes          |           4 |
+-------+-----------------+-----------------+-------+-----------+--------------+-------------+

mysql> select * from issues;
+---------+----------+-------+------------+------------+
| issueid | memberid | accno | issuedate  | duedate    |
+---------+----------+-------+------------+------------+
|      11 |        1 |     6 | 2025-03-01 | 2025-03-15 |
|      12 |        2 |     7 | 2025-03-02 | 2025-03-16 |
|      13 |        3 |     8 | 2025-03-05 | 2025-03-19 |
|      14 |        4 |     9 | 2025-03-10 | 2025-03-24 |
|      15 |        5 |    10 | 2025-03-12 | 2025-03-26 |
|     999 |        2 |     6 | 2025-04-30 | 2025-05-13 |
+---------+----------+-------+------------+------------+
